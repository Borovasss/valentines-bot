import asyncio
import sqlite3
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F
from aiogram.types import LabeledPrice
import uuid

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize main bot and moderation bot
bot = Bot(token="8004585329:AAEe_MSDprlIqZdjyEV3AYH2iiQJDHTeCkM")
moderation_bot = Bot(token="8184681913:AAEOfeBGA2p5S7q207ZpY-4qjCdBAW5gEEg")
dp = Dispatcher()

# Initialize SQLite database
def init_db():
    conn = sqlite3.connect("valentines.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        unique_link TEXT UNIQUE
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS messages (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        receiver_id INTEGER,
        sender_id INTEGER,
        message TEXT,
        is_anonymous INTEGER DEFAULT 1
    )''')
    conn.commit()
    conn.close()

# Generate unique link for user
async def generate_unique_link(user_id):
    unique_id = str(uuid.uuid4())
    conn = sqlite3.connect("valentines.db")
    c = conn.cursor()
    c.execute("INSERT OR REPLACE INTO users (user_id, unique_link) VALUES (?, ?)", (user_id, unique_id))
    conn.commit()
    conn.close()
    bot_info = await bot.get_me()
    return f"https://t.me/{bot_info.username}?start={unique_id}"

# Get user_id from unique link
def get_user_from_link(unique_id):
    conn = sqlite3.connect("valentines.db")
    c = conn.cursor()
    c.execute("SELECT user_id FROM users WHERE unique_link = ?", (unique_id,))
    result = c.fetchone()
    conn.close()
    return result[0] if result else None

# Start command handler
@dp.message(Command("start"))
async def start_command(message: types.Message):
    args = message.text.split()
    if len(args) > 1:  # If the start command has a parameter (deep link)
        unique_id = args[1]
        receiver_id = get_user_from_link(unique_id)
        if receiver_id and receiver_id != message.from_user.id:
            # Prompt to send an anonymous message
            await message.answer("üíå –ù–∞–ø–∏—à–∏—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –≤–∞–ª–µ–Ω—Ç–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=types.ReplyKeyboardRemove())
            dp.data[message.from_user.id] = {"receiver_id": receiver_id}
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∏–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é —Å—Å—ã–ª–∫—É.")
    else:
        # Generate and send user's unique link with share button
        user_link = await generate_unique_link(message.from_user.id)
        share_button = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", switch_inline_query=user_link)]
        ])
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –≤–∞–ª–µ–Ω—Ç–∏–Ω–æ–∫! üíñ\n"
            f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n{user_link}\n\n"
            f"–ö–æ–≥–¥–∞ –≤–∞–º –æ—Ç–ø—Ä–∞–≤—è—Ç –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É, –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞ 5 Telegram Stars —É–∑–Ω–∞—Ç—å, –∫—Ç–æ –µ—ë –Ω–∞–ø–∏—Å–∞–ª!",
            reply_markup=share_button
        )

# Support commands for Telegram Stars
@dp.message(Command("paysupport"))
async def paysupport_command(message: types.Message):
    await message.answer("–î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –æ–ø–ª–∞—Ç–µ –ø–∏—à–∏—Ç–µ: @Borov3223")  # –ó–∞–º–µ–Ω–∏—Ç–µ, –µ—Å–ª–∏ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç

@dp.message(Command("support"))
async def support_command(message: types.Message):
    await message.answer("–î–ª—è –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–∏—à–∏—Ç–µ: @Borov3223")  # –ó–∞–º–µ–Ω–∏—Ç–µ, –µ—Å–ª–∏ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç

@dp.message(Command("terms"))
async def terms_command(message: types.Message):
    await message.answer("–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: https://telegram.org/tos")

# Handle incoming text messages (valentines)
@dp.message(F.text)
async def handle_message(message: types.Message):
    if message.from_user.id in dp.data:
        receiver_id = dp.data[message.from_user.id]["receiver_id"]
        sender_id = message.from_user.id
        message_text = message.text

        # Save message to database
        conn = sqlite3.connect("valentines.db")
        c = conn.cursor()
        c.execute("INSERT INTO messages (receiver_id, sender_id, message) VALUES (?, ?, ?)",
                  (receiver_id, sender_id, message_text))
        conn.commit()
        message_id = c.lastrowid
        conn.close()

        # Send message to moderation bot
        mod_message = (
            f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
            f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å ID: {sender_id}\n"
            f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å ID: {receiver_id}\n"
            f"–¢–µ–∫—Å—Ç: {message_text}"
        )
        try:
            await moderation_bot.send_message(
                chat_id=5397929249,  # –í–∞—à Telegram ID
                text=mod_message
            )
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É –±–æ—Ç—É: {mod_message}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É –±–æ—Ç—É: {e}")

        # Notify receiver
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –£–∑–Ω–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (5 Stars)", callback_data=f"reveal_{message_id}")]
        ])
        await bot.send_message(
            receiver_id,
            f"üíå –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∞–Ω–æ–Ω–∏–º–Ω—É—é –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É:\n{message_text}",
            reply_markup=keyboard
        )
        await message.answer("–í–∞—à–µ –≤–∞–ª–µ–Ω—Ç–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! üíñ")
        del dp.data[message.from_user.id]
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–ª–∏ /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é —Å—Å—ã–ª–∫—É."
        )

# Handle reveal sender button
@dp.callback_query(F.data.startswith("reveal_"))
async def reveal_sender(callback: types.CallbackQuery):
    message_id = int(callback.data.split("_")[1])
    conn = sqlite3.connect("valentines.db")
    c = conn.cursor()
    c.execute("SELECT sender_id FROM messages WHERE id = ?", (message_id,))
    sender_id = c.fetchone()[0]
    conn.close()

    # Create payment invoice for Telegram Stars
    prices = [LabeledPrice(label="–£–∑–Ω–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è", amount=500)]  # 5 Stars = 500 (–≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö Telegram Stars)
    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title="–£–∑–Ω–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è",
        description="–ó–∞–ø–ª–∞—Ç–∏—Ç–µ 5 Telegram Stars, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.",
        payload=f"reveal_{message_id}",
        provider_token="",  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è Telegram Stars
        currency="XTR",  # –í–∞–ª—é—Ç–∞ Telegram Stars
        prices=prices
    )

# Handle pre-checkout query
@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

# Handle successful payment
@dp.message(F.successful_payment)
async def successful_payment(message: types.Message):
    payload = message.successful_payment.invoice_payload
    message_id = int(payload.split("_")[1])
    conn = sqlite3.connect("valentines.db")
    c = conn.cursor()
    c.execute("–£–∑–Ω–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è FROM messages WHERE id = ?", (message_id,))
    sender_id = c.fetchone()[0]
    c.execute("UPDATE messages SET is_anonymous = 0 WHERE id = ?", (message_id,))
    conn.commit()
    conn.close()

    # Send sender's profile link
    sender_chat = await bot.get_chat(sender_id)
    sender_profile = f"https://t.me/{sender_chat.username or sender_id}"
    await message.answer(f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Ä–∞—Å–∫—Ä—ã—Ç! –ü—Ä–æ—Ñ–∏–ª—å: {sender_profile}")

async def main():
    init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())