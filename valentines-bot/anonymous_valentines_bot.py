import asyncio
import sqlite3
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F
from aiogram.types import LabeledPrice
import uuid

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Initialize bot
bot = Bot(token="7953383202:AAGDM20U_YXOj_t_PfNvScytpFl55pRc_lE")  # –ë–æ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
dp = Dispatcher()

# Admin settings
ADMIN_ID = 5397929249  # –í–∞—à Telegram ID
ADMIN_PASSWORD = "Borov329700"  # –ü–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø–∞

# Initialize SQLite database
def init_db():
    try:
        conn = sqlite3.connect("valentines.db")
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            unique_link TEXT UNIQUE
        )''')
        c.execute('''CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            receiver_id INTEGER,
            sender_id INTEGER,
            message TEXT,
            is_anonymous INTEGER DEFAULT 1
        )''')
        c.execute('''CREATE TABLE IF NOT EXISTS banned_users (
            user_id INTEGER PRIMARY KEY
        )''')
        conn.commit()
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        conn.close()

# Check if user is banned
def is_user_banned(user_id):
    try:
        conn = sqlite3.connect("valentines.db")
        c = conn.cursor()
        c.execute("SELECT user_id FROM banned_users WHERE user_id = ?", (user_id,))
        result = c.fetchone()
        conn.close()
        return result is not None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–Ω–∞ –¥–ª—è user_id {user_id}: {e}")
        return False

# Generate unique link for user
async def generate_unique_link(user_id):
    try:
        unique_id = str(uuid.uuid4())
        conn = sqlite3.connect("valentines.db")
        c = conn.cursor()
        c.execute("INSERT OR REPLACE INTO users (user_id, unique_link) VALUES (?, ?)", (user_id, unique_id))
        conn.commit()
        logging.info(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω user_id {user_id} —Å unique_id {unique_id} –≤ –ë–î")
        bot_info = await bot.get_me()
        link = f"https://t.me/{bot_info.username}?start={unique_id}"
        logging.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è user_id {user_id}: {link}")
        return link
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è user_id {user_id}: {e}")
        return None
    finally:
        conn.close()

# Get user_id from unique link
def get_user_from_link(unique_id):
    try:
        conn = sqlite3.connect("valentines.db")
        c = conn.cursor()
        c.execute("SELECT user_id FROM users WHERE unique_link = ?", (unique_id,))
        result = c.fetchone()
        logging.info(f"–ü–æ–∏—Å–∫ user_id –¥–ª—è unique_id {unique_id}: {result}")
        return result[0] if result else None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ user_id –¥–ª—è unique_id {unique_id}: {e}")
        return None
    finally:
        conn.close()

# Start command handler with menu
@dp.message(CommandStart())
async def start_command(message: types.Message):
    args = message.text.split()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç user_id {message.from_user.id} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {args}")
    
    # Check if user is banned
    if is_user_banned(message.from_user.id):
        await message.answer("üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç.")
        logging.warning(f"–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–π user_id {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /start")
        return
    
    # Handle link-based start
    if len(args) > 1:
        unique_id = args[1]
        receiver_id = get_user_from_link(unique_id)
        if receiver_id and receiver_id != message.from_user.id:
            await message.answer(
                "üíå –ù–∞–ø–∏—à–∏—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –≤–∞–ª–µ–Ω—Ç–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
                reply_markup=types.ReplyKeyboardRemove()
            )
            dp.data[message.from_user.id] = {"receiver_id": receiver_id}
            logging.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è user_id {message.from_user.id}, receiver_id: {receiver_id}")
        else:
            user_link = await generate_unique_link(message.from_user.id)
            if user_link:
                menu = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", switch_inline_query=user_link)],
                    [InlineKeyboardButton(text="üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
                ])
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∏–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞!\n\n"
                    "üíñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –≤–∞–ª–µ–Ω—Ç–∏–Ω–æ–∫! üíñ\n\n"
                    "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª–Ω—ã–µ –ª—é–±–≤–∏ –∏ —Ç–µ–ø–ª–∞! üíå\n"
                    f"–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {user_link}\n"
                    "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ—é —Å –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏!\n\n"
                    "–ó–∞ 5 Telegram Stars üåü –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=menu
                )
                logging.info(f"–°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ user_id {message.from_user.id}: {user_link}")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è user_id {message.from_user.id}")
    else:
        user_link = await generate_unique_link(message.from_user.id)
        if user_link:
            menu = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", switch_inline_query=user_link)],
                [InlineKeyboardButton(text="üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
            ])
            await message.answer(
                "üíñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –≤–∞–ª–µ–Ω—Ç–∏–Ω–æ–∫! üíñ\n\n"
                "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª–Ω—ã–µ –ª—é–±–≤–∏ –∏ —Ç–µ–ø–ª–∞! üíå\n"
                f"–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {user_link}\n"
                "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ—é —Å –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏!\n\n"
                "–ó–∞ 5 Telegram Stars üåü –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=menu
            )
            logging.info(f"–°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ user_id {message.from_user.id}: {user_link}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è user_id {message.from_user.id}")

# Admin panel callback
@dp.callback_query(F.data == "admin_panel")
async def admin_panel_callback(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        logging.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –æ—Ç user_id {callback.from_user.id}")
        await callback.answer()
        return
    
    if dp.data.get(callback.from_user.id, {}).get("admin_authorized", False):
        await show_admin_panel(callback.message)
    else:
        await callback.message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:")
        dp.data[callback.from_user.id] = dp.data.get(callback.from_user.id, {})
        dp.data[callback.from_user.id]["awaiting_password"] = True
    await callback.answer()

# Handle password input
@dp.message(F.text & F.func(lambda message: dp.data.get(message.from_user.id, {}).get("awaiting_password", False)))
async def handle_password(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    if message.text == ADMIN_PASSWORD:
        dp.data[message.from_user.id]["admin_authorized"] = True
        dp.data[message.from_user.id]["awaiting_password"] = False
        await show_admin_panel(message)
        logging.info(f"–ê–¥–º–∏–Ω user_id {message.from_user.id} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç user_id {message.from_user.id}")

# Show admin panel
async def show_admin_panel(message: types.Message):
    admin_menu = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="admin_messages")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_clear_db")],
        [InlineKeyboardButton(text="üö´ –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_ban")],
        [InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_unban")],
        [InlineKeyboardButton(text="üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_lock")]
    ])
    await message.answer(
        "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_menu
    )

# Admin callback handler
@dp.callback_query(F.data.startswith("admin_"))
async def admin_callback(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID or not dp.data.get(callback.from_user.id, {}).get("admin_authorized", False):
        await callback.message.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        logging.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏—é –æ—Ç user_id {callback.from_user.id}")
        await callback.answer()
        return
    
    action = callback.data.split("_")[1]
    
    if action == "messages":
        try:
            conn = sqlite3.connect("valentines.db")
            c = conn.cursor()
            c.execute("SELECT id, receiver_id, sender_id, message, is_anonymous FROM messages ORDER BY id DESC LIMIT 10")
            messages = c.fetchall()
            conn.close()

            if not messages:
                await callback.message.answer("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                logging.info("–ö–æ–º–∞–Ω–¥–∞ /messages: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
                return

            response = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
            for msg in messages:
                msg_id, receiver_id, sender_id, text, is_anonymous = msg
                response += (
                    f"ID: {msg_id}\n"
                    f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å ID: {sender_id}\n"
                    f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å ID: {receiver_id}\n"
                    f"–¢–µ–∫—Å—Ç: {text}\n"
                    f"–ê–Ω–æ–Ω–∏–º–Ω–æ: {'–î–∞' if is_anonymous else '–ù–µ—Ç'}\n\n"
                )
            await callback.message.answer(response)
            logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /messages –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è user_id {callback.from_user.id}")
        except Exception as e:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.")
            logging.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /messages: {e}")
    
    elif action == "stats":
        try:
            conn = sqlite3.connect("valentines.db")
            c = conn.cursor()
            c.execute("SELECT COUNT(*) FROM users")
            user_count = c.fetchone()[0]
            c.execute("SELECT COUNT(*) FROM messages")
            message_count = c.fetchone()[0]
            c.execute("SELECT COUNT(*) FROM banned_users")
            banned_count = c.fetchone()[0]
            conn.close()
            await callback.message.answer(
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–π: {message_count}\n"
                f"–ó–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {banned_count}"
            )
            logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /stats –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è user_id {callback.from_user.id}")
        except Exception as e:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
            logging.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats: {e}")
    
    elif action == "clear_db":
        await callback.message.answer("üóë –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–≤–≤–µ–¥–∏—Ç–µ: –ü–û–î–¢–í–ï–†–î–ò–¢–¨):")
        dp.data[callback.from_user.id]["awaiting_clear_db"] = True
    
    elif action == "ban":
        await callback.message.answer("üö´ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞:")
        dp.data[callback.from_user.id]["awaiting_ban"] = True
    
    elif action == "unban":
        await callback.message.answer("‚úÖ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:")
        dp.data[callback.from_user.id]["awaiting_unban"] = True
    
    elif action == "lock":
        dp.data[callback.from_user.id]["admin_authorized"] = False
        user_link = await generate_unique_link(callback.from_user.id)
        if user_link:
            menu = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", switch_inline_query=user_link)],
                [InlineKeyboardButton(text="üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
            ])
            await callback.message.answer(
                "üîí –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.\n\n"
                "üíñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –≤–∞–ª–µ–Ω—Ç–∏–Ω–æ–∫! üíñ\n\n"
                "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª–Ω—ã–µ –ª—é–±–≤–∏ –∏ —Ç–µ–ø–ª–∞! üíå\n"
                f"–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {user_link}\n"
                "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ—é —Å –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏!\n\n"
                "–ó–∞ 5 Telegram Stars üåü –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=menu
            )
            logging.info(f"–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è user_id {callback.from_user.id}")
        else:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è user_id {callback.from_user.id}")
    
    await callback.answer()

# Handle clear_db confirmation
@dp.message(F.text & F.func(lambda message: dp.data.get(message.from_user.id, {}).get("awaiting_clear_db", False)))
async def handle_clear_db(message: types.Message):
    if message.from_user.id != ADMIN_ID or not dp.data.get(message.from_user.id, {}).get("admin_authorized", False):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    if message.text == "–ü–û–î–¢–í–ï–†–î–ò–¢–¨":
        try:
            conn = sqlite3.connect("valentines.db")
            c = conn.cursor()
            c.execute("DELETE FROM users")
            c.execute("DELETE FROM messages")
            c.execute("DELETE FROM banned_users")
            conn.commit()
            conn.close()
            await message.answer("üóë –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.")
            logging.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ user_id {message.from_user.id}")
        except Exception as e:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
            logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        finally:
            dp.data[message.from_user.id]["awaiting_clear_db"] = False
    else:
        await message.answer("‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –ü–û–î–¢–í–ï–†–î–ò–¢–¨ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        dp.data[message.from_user.id]["awaiting_clear_db"] = False

# Handle ban user
@dp.message(F.text & F.func(lambda message: dp.data.get(message.from_user.id, {}).get("awaiting_ban", False)))
async def handle_ban_user(message: types.Message):
    if message.from_user.id != ADMIN_ID or not dp.data.get(message.from_user.id, {}).get("admin_authorized", False):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        user_id = int(message.text)
        if user_id == ADMIN_ID:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        conn = sqlite3.connect("valentines.db")
        c = conn.cursor()
        c.execute("INSERT OR IGNORE INTO banned_users (user_id) VALUES (?)", (user_id,))
        conn.commit()
        conn.close()
        await message.answer(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω.")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω –∞–¥–º–∏–Ω–æ–º {message.from_user.id}")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ).")
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        logging.error(f"–û—à–∏–±–∫–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    finally:
        dp.data[message.from_user.id]["awaiting_ban"] = False

# Handle unban user
@dp.message(F.text & F.func(lambda message: dp.data.get(message.from_user.id, {}).get("awaiting_unban", False)))
async def handle_unban_user(message: types.Message):
    if message.from_user.id != ADMIN_ID or not dp.data.get(message.from_user.id, {}).get("admin_authorized", False):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        user_id = int(message.text)
        conn = sqlite3.connect("valentines.db")
        c = conn.cursor()
        c.execute("DELETE FROM banned_users WHERE user_id = ?", (user_id,))
        conn.commit()
        conn.close()
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω –∞–¥–º–∏–Ω–æ–º {message.from_user.id}")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ).")
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    finally:
        dp.data[message.from_user.id]["awaiting_unban"] = False

# Support and terms commands
@dp.message(Command("paysupport"))
async def paysupport_command(message: types.Message):
    await message.answer("üìû –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –æ–ø–ª–∞—Ç–µ –ø–∏—à–∏—Ç–µ: @Borov3223")  # –ó–∞–º–µ–Ω–∏—Ç–µ, –µ—Å–ª–∏ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç

@dp.message(Command("support"))
async def support_command(message: types.Message):
    await message.answer("üìû –î–ª—è –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–∏—à–∏—Ç–µ: @Borov3223")  # –ó–∞–º–µ–Ω–∏—Ç–µ, –µ—Å–ª–∏ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç

@dp.message(Command("terms"))
async def terms_command(message: types.Message):
    await message.answer("üìú –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: https://telegram.org/tos")

# Handle incoming text messages
@dp.message(F.text)
async def handle_message(message: types.Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id {message.from_user.id}: {message.text}")
    
    # Skip if user is banned
    if is_user_banned(message.from_user.id):
        await message.answer("üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
        logging.warning(f"–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–π user_id {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    
    if message.from_user.id in dp.data and "receiver_id" in dp.data[message.from_user.id]:
        receiver_id = dp.data[message.from_user.id]["receiver_id"]
        sender_id = message.from_user.id
        message_text = message.text
        logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: sender_id {sender_id}, receiver_id {receiver_id}, —Ç–µ–∫—Å—Ç: {message_text}")

        # Save message to database
        try:
            conn = sqlite3.connect("valentines.db")
            c = conn.cursor()
            c.execute("INSERT INTO messages (receiver_id, sender_id, message) VALUES (?, ?, ?)",
                      (receiver_id, sender_id, message_text))
            conn.commit()
            message_id = c.lastrowid
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: message_id {message_id}, receiver_id {receiver_id}, sender_id {sender_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        finally:
            conn.close()

        # Send message to moderator
        mod_message = (
            f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
            f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å ID: {sender_id}\n"
            f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å ID: {receiver_id}\n"
            f"–¢–µ–∫—Å—Ç: {message_text}"
        )
        try:
            await bot.send_message(
                chat_id=ADMIN_ID,  # –í–∞—à Telegram ID
                text=mod_message
            )
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É: {mod_message}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É: {e}")

        # Notify receiver
        try:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîç –£–∑–Ω–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (5 Stars)", callback_data=f"reveal_{message_id}")]
            ])
            await bot.send_message(
                receiver_id,
                f"üíå –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∞–Ω–æ–Ω–∏–º–Ω—É—é –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É:\n{message_text}",
                reply_markup=keyboard
            )
            logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—é receiver_id {receiver_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—é receiver_id {receiver_id}: {e}")
        await message.answer("–í–∞—à–µ –≤–∞–ª–µ–Ω—Ç–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! üíñ")
        del dp.data[message.from_user.id]
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–ª–∏ /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é —Å—Å—ã–ª–∫—É."
        )

# Handle reveal sender button
@dp.callback_query(F.data.startswith("reveal_"))
async def reveal_sender(callback: types.CallbackQuery):
    message_id = int(callback.data.split("_")[1])
    conn = sqlite3.connect("valentines.db")
    c = conn.cursor()
    c.execute("SELECT sender_id FROM messages WHERE id = ?", (message_id,))
    result = c.fetchone()
    sender_id = result[0] if result else None
    conn.close()

    if sender_id:
        prices = [LabeledPrice(label="–£–∑–Ω–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è", amount=500)]
        await bot.send_invoice(
            chat_id=callback.from_user.id,
            title="–£–∑–Ω–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è",
            description="–ó–∞–ø–ª–∞—Ç–∏—Ç–µ 5 Telegram Stars, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.",
            payload=f"reveal_{message_id}",
            provider_token="",
            currency="XTR",
            prices=prices
        )
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        logging.error(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è reveal")
    await callback.answer()

# Handle pre-checkout query
@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

# Handle successful payment
@dp.message(F.successful_payment)
async def successful_payment(message: types.Message):
    payload = message.successful_payment.invoice_payload
    message_id = int(payload.split("_")[1])
    conn = sqlite3.connect("valentines.db")
    c = conn.cursor()
    c.execute("SELECT sender_id FROM messages WHERE id = ?", (message_id,))
    result = c.fetchone()
    sender_id = result[0] if result else None
    c.execute("UPDATE messages SET is_anonymous = 0 WHERE id = ?", (message_id,))
    conn.commit()
    conn.close()

    if sender_id:
        sender_chat = await bot.get_chat(sender_id)
        sender_profile = f"https://t.me/{sender_chat.username or sender_id}"
        await message.answer(f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Ä–∞—Å–∫—Ä—ã—Ç! –ü—Ä–æ—Ñ–∏–ª—å: {sender_profile}")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        logging.error(f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –¥–ª—è message_id {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

async def main():
    init_db()
    try:
        await dp.start_polling(bot)
        logging.info("–û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–ø—Ä–æ—Å–∞: {e}")
        raise  # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ª–æ–≥–∞—Ö Render

if __name__ == "__main__":
    asyncio.run(main())
